# 项目名称：预设管理器 (Preset Manager Momo)

## 版本
- **当前版本:** 1.2.1

## 核心功能
1.  **预设切换:** 在一个独立的浮动窗口中，快速查看并加载SillyTavern中所有已保存的预设。
2.  **预设管理:**
    *   **删除:** 从列表中移除不再需要的预设。
3.  **AI辅助功能:**
    *   **AI辅助修改:** 在“高级编辑”视图中，用户可以通过自然语言描述修改要求，插件将调用AI来智能地修改预设中特定条目的值。
    *   **AI创建条目:** 在独立的“AI创建条目”视图中，用户可以通过自然语言描述需求，插件将调用AI自动生成一个包含名称和内容的全新条目，并将其添加到指定预设中。
4.  **高级编辑功能:**
    *   **手动编辑:** 提供一个类似SillyTavern原生UI的表单界面，允许用户直观地查看和修改预设中`prompt`条目的各项属性。
5.  **高级管理功能:**
    *   **批量删除:** 在专门的视图中，通过多选框选择多个预设或一个预设内的多个条目，进行批量删除。
    *   **条目复制:** 在专门的视图中，选择一个源预设和一个目标预设，然后通过多选框选择源预设中的条目，将其复制到目标预设中。

## 技术实现
- **前端:** HTML, CSS, JavaScript (jQuery)
- **核心API:**
- **UI:**
    - 一个可拖动的浮动按钮，用于打开主界面。
    - 一个弹窗界面，包含主视图（预设列表）和修改视图（高级编辑功能）。
    - 响应式设计，适配桌面和移动端视图。
- **存储:**
    - **`localStorage`**: 仅用于存储插件UI的状态，如浮动按钮的位置和插件的启用/禁用状态。所有核心预设数据均由SillyTavern管理。
- **更新机制:**
    - 集成了一个自动更新检查器，可以从GitHub仓库拉取最新的版本信息和更新日志。
    - 用户可以手动触发更新检查，并在发现新版本时一键完成更新。

## 原生PresetManager API解析 (基于 `preset-manager.js`)
为了避免未来的开发错误，特此记录SillyTavern原生`PresetManager`的核心API用法。

- **`getPresetManager(apiId = '')`**:
    - **功能:** 获取指定API的预设管理器实例。如果不提供`apiId`，则获取当前主API的管理器。
    - **用法:** `const stApi = await context.getPresetManager();`

- **`getAllPresets()`**:
    - **功能:** 获取所有预设的**名称**列表。
    - **返回:** `string[]` (例如: `["My Preset 1", "My Preset 2"]`)
    - **用法:** `const presetNames = stApi.getAllPresets();`

- **`getCompletionPresetByName(name)`**:
    - **功能:** 根据预设**名称**获取完整的预设**数据对象**。这是获取预设内容最可靠的方法。
    - **返回:** `object` (预设的JSON内容) 或 `undefined`。
    - **用法:** `const presetData = stApi.getCompletionPresetByName("My Preset 1");`

- **`getSelectedPresetName()`**:
    - **功能:** 获取当前在SillyTavern主界面中被选中的预设的**名称**。
    - **返回:** `string` (例如: `"My Preset 1"`)
    - **核心用途:** **判断哪个预设是当前激活的预设**，用于UI高亮等功能。

- **`findPreset(name)`**:
    - **功能:** 根据预设**名称**查找预设，并返回其在下拉菜单中的内部**值(value)**。
    - **返回:** `any` (通常是数字索引或字符串值，用于`selectPreset`)
    - **注意:** 这个方法不返回预设的数据对象。

- **`selectPreset(value)`**:
    - **功能:** 根据`findPreset(name)`返回的**值(value)**来应用一个预设。这是触发预设加载的正确方法。
    - **用法:**
        ```javascript
        const presetValue = stApi.findPreset("My Preset 1");
        if (presetValue !== undefined) {
            stApi.selectPreset(presetValue);
        }
        ```

- **`savePreset(name, settings)`**:
    - **功能:** 保存一个预设。如果名为`name`的预设已存在，则覆盖它；如果不存在，则创建新的。
    - **用法:** `await stApi.savePreset("My New Preset", { temp: 0.8, ... });`

- **`deletePreset(name)`**:
    - **功能:** 根据名称删除一个预设。
- **用法:** `await stApi.deletePreset("My Old Preset");`

## 开发日志

### **版本 1.2.1 (2025-06-24)**
- **【移动端适配】**: 全面优化了插件的移动端体验，为所有交互元素添加了触摸事件支持。
- **适配详情**:
    1.  **事件绑定**: 将所有 `click` 事件监听器扩展为 `click touchend`，确保按钮和链接在触摸设备上能够被正确触发。
    2.  **拖动优化**: 重写了浮动按钮的拖动逻辑 (`makeButtonDraggable`)，使其能够同时响应鼠标 (`mousedown`/`mousemove`) 和触摸 (`touchstart`/`touchmove`) 事件，并能准确区分“轻触”与“拖动”操作。
    3.  **兼容性修复**: 通过在触摸事件处理中加入 `e.preventDefault()`，解决了移动端浏览器可能产生的“双击”问题。
- **最终效果**: 插件现在可以在手机和平板等触摸设备上流畅、可靠地运行，所有功能均已适配触摸操作。

### **版本 1.2.0 (2025-06-24)**
- **【UI/UX重构】**: 根据用户反馈，对“AI创建条目”功能进行了重大重构。
- **重构详情**:
    1.  **界面分离**: 将“AI创建条目”功能从混乱的主视图中剥离，迁移到一个独立的、专用的子页面（视图）。
    2.  **流程优化**: 在主视图底部添加了一个清晰的“✨ AI创建条目”按钮，点击后会平滑地切换到新视图，使用户操作流程更符合逻辑、更清晰。
    3.  **代码优化**: 对 `index.js` 和 `popup.html` 进行了同步重构，确保了视图切换逻辑的稳定性和代码的可维护性。
- **最终效果**: 插件主界面变得更加整洁，核心功能分区明确，提升了整体的用户体验。

### **版本 1.1.2 (2025-06-24)**
- **【核心重写】**: 根据用户的最终指示，彻底重写了“条目复制”功能的核心逻辑。
- **修复详情**:
    1.  **全面同步**: 新逻辑会检测目标预设中**所有**存在的`character_id`列表（包括默认和所有角色专用列表）。
    2.  **同步添加**: 将新复制的条目数据**同时添加**到`prompts`数据库和**所有**检测到的`prompt_order`显示列表中。
    3.  **错误修复**: 移除了一个不存在的`reloadPrompts()`函数调用，该调用此前会导致功能成功但UI弹出错误提示。
- **最终效果**: “条目复制”功能现在可以完美地一步到位，将条目添加到所有相关列表，且无任何错误提示。

### **版本 1.1.1 (2025-06-24)**
- **【核心修复】**: 彻底解决了“条目复制”功能的核心Bug。此前，插件在复制条目时，只更新了预设文件中的 `prompts` 数组（条目数据库），却忽略了更新至关重要的 `prompt_order` 数组（条目显示列表）。这导致SillyTavern虽然接收了新条目的数据，但在主界面上却无法渲染它们。
- **修复详情**: 新的逻辑确保在复制条目时，会同时将条目的完整数据添加到 `prompts` 数组，并将其ID和启用状态添加到 `prompt_order` 数组中。这保证了数据操作的完整性，使SillyTavern能够正确识别并显示所有被复制的新条目。

### **版本 1.1.0 (2025-06-24)**
- **修复**: 修正了“批量删除”视图中条目列表的渲染逻辑，使其与新的 `prompts` 数组数据结构保持一致，解决了条目显示不正确的问题。
- **修复**: 解决了在“高级编辑”中保存任何更改（包括条目内容、高级参数）后，页面会意外跳转回主视图的问题。现在插件会正确地停留在编辑界面并刷新数据，保持操作的连续性。
- **优化**: 改进了所有删除操作（单个预设、批量预设、批量条目）的用户体验。现在删除后，项目会立即从UI中消失，无需等待或手动刷新，提供了更流畅的即时反馈。
- **修复**: 修正了在“批量删除条目”功能中，即使删除成功也会错误地弹出“删除失败”提示的Bug。
- **修复**: 统一了“条目复制”功能的数据处理方式，使其能够正确地显示和复制基于新 `prompts` 数组的条目。
